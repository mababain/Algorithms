// На Новом проспекте построили подряд 10 зданий. Каждое здание может быть либо жилым домом, либо магазином, либо офисным зданием.

// Но оказалось, что жителям некоторых домов на Новом проспекте слишком далеко приходится идти до ближайшего магазина. Для разработки плана развития общественного транспорта на Новом проспекте мэр города попросил вас выяснить, какое же наибольшее расстояние приходится преодолевать жителям Нового проспекта, чтобы дойти от своего дома до ближайшего магазина.

// Формат ввода:
// Программа получает на вход десять чисел, разделенных пробелами. Каждое число задает тип здания на Новом проспекте: число 1 обозначает жилой дом, число 2 обозначает магазин, число 0 обозначает офисное здание. Гарантируется, что на Новом проспекте есть хотя бы один жилой дом и хотя бы один магазин.

// Формат вывода:
// Выведите одно целое число: наибольшее расстояние от дома до ближайшего к нему магазина. Расстояние между двумя соседними домами считается равным 1 (то есть если два дома стоят рядом, то между ними расстояние 1, если между двумя домами есть еще один дом, то расстояние между ними равно 2 и т.д.)

// Пример
// Ввод	Вывод: 3
// 2 0 1 1 0 1 0 2 1 2

// Примечания
// В примере из условия дальше всего идти до ближайшего магазина жителям четвертого дома: ближайший к их дому магазин находится в первом доме, и им нужно пройти три дома до него. Жителям других домов придется пройти меньшее расстояние до ближайшего магазина, поэтому ответ 3.

function alg(data) {
  const nums = data
    .toString()
    .trim()
    .split(' ')
    .map((n) => +n)
  const shopIndexes = []
  let maxPath = 0
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] === 2) shopIndexes.push(i)
  }
  let currShopIdx = 0
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] === 1) {
      if (shopIndexes[currShopIdx + 1] < i && shopIndexes[currShopIdx + 1])
        currShopIdx++
      const leftShop =
        Math.max(shopIndexes[currShopIdx], i) -
        Math.min(shopIndexes[currShopIdx], i)
      const rightShop =
        Math.max(shopIndexes[currShopIdx + 1], i) -
        Math.min(shopIndexes[currShopIdx + 1], i)
      let minPath = null
      if (rightShop) {
        minPath = Math.min(leftShop, rightShop)
      } else {
        minPath = leftShop
      }
      if (maxPath < minPath) maxPath = minPath
    }
  }
  return maxPath
}

process.stdin.on('data', (data) => {
  const result = alg(data)
  process.stdout.write(result + '')
  process.exit()
})
